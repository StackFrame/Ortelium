# **********************************************************************
# 
# <copyright>
# 
#  BBN Technologies
#  10 Moulton Street
#  Cambridge, MA 02138
#  (617) 873-8000
# 
#  Copyright (C) BBNT Solutions LLC. All rights reserved.
# 
# </copyright>
# **********************************************************************
# 
# $Source: /cvs/distapps/openmap/openmap.properties,v $
# $RCSfile: openmap.properties,v $
# $Revision: 1.38.2.11 $
# $Date: 2009/03/03 21:20:51 $
# $Author: dietrick $
# 
# **********************************************************************
#
# WHAT IS THIS FILE?
#
# This is a generic OpenMap properties file, which controls how
# components are loaded into the OpenMap application.  It specifies
# the initial projection the map should have when OpenMap is started,
# the layers that should be available, which ones should be turned on,
# and lets you adjust all the layers' attributes for their startup
# configuration.  Most importantly, this file also lets you add and
# remove different components from the application itself.  You can
# modify it with any text editor you like.
#
# WHAT ARE PROPERTIES?
# 
# Java properties are a set of key=value pairs.  The key is the name
# of the thing you are setting, and the value is what you are setting
# it to.  There are a couple of things to look for that we do with key
# values in this properties file.
#
# First, all the properties that can be set for a component are
# *hopefully* listed in the Javadocs (Java API documentation).  If a
# component is specified as a com.bbn.openmap.PropertyConsumer, it
# will be given a chance to configure itself based on the settings
# within the properties file.  Components can be layers or any other
# part of the OpenMap application.
#
# Secondly, the keys are scoped to focus the value to a specific
# instance of a components.  If there are more that one layer of a
# specific type (say, two ShapeLayers, one for roads and one for
# rivers), the names of the keys will have a different prefix for the
# key.  For instance, ShapeLayers have a lineColor attribute you can
# set in this file, and the value used is a hexadecimal value for an
# ARGB color (transparency (A), red (R), green (G), blue (B)):
# 
# For a red, non-transparent color for the line.
# lineColor=FFFF0000
# 
# But there are two layers - to scope the property for different
# layers, a prefix must be added to the property, separated by a '.':
#
# roads.lineColor=FFFF0000
# rivers.lineColor=FF0000FF
#
# In this case, the roads layer has a red line color and the rivers
# layer has a blue line color.  The prefix 'roads' and 'rivers' is
# something picked to your liking and used only within this property
# file, and is referred to in OpenMap documentation as a marker name.
# Marker names are first used in a list - the openmap.layers property
# is a perfect example:
#
# openmap.layers=first second third
#
# In this example, I've chosen first, second and third to be marker
# names of three different layers.  Later in the properties file, I
# would use these marker names to define the layers and each layer's
# attributes.  For the 'first' layer, I'll define a ShapeLayer:
#
# # All layers require a class name that defines which one to use
# first.class=com.bbn.openmap.layer.shape.ShapeLayer
#
# # And a pretty name to use in the GUI
# first.prettyName=Roads
#
# # Now come properties that are particular to ShapeLayers:
#
# # These first two are mandatory for the ShapeLayer:
# first.shapeFile=<path to shape file (.shp)>
# first.spatialIndex=<path to spatial index file (.ssx)>
#
# # These are optional, and override the defaults set in the ShapeLayer:
# first.lineColor=FFFF0000
# first.lineWidth=2
#
# You do this for each layer listed.  To add a layer to the
# application, you make up a marker name, add it to the list, and then
# define a set of properties for it using the marker name as a prefix.
#

# This marker name list paradigm is used throughout the properties
# file.  It's an important concept to understand before modifying this
# file.
#
# HOW MANY PROPERTIES FILES ARE THERE?
#
# OpenMap looks for this file in several different places.  When it
# finds one, it loads all the properties, and moves on.  If two
# properties have the same key, the last version read wins.  The most
# important place to keep a version of the openmap.properties file is
# a personalized one in your home directory or profile directory.
# This is the last one read.  It also lets you personalize your
# application setup and not affect anyone else using the OpenMap
# installation.
#
# OK, lets define the map!
#
# ###################################################
# These properties define the starting projection of the map.  
# These properties are listed in com.bbn.openmap.Environment.java,
# and affect the initialization of the application.
# ###################################################

# MAP STARTUP PROJECTION PARAMETERS
# Latitude and longitude in decimal degrees
openmap.Latitude=20f
openmap.Longitude=-20f
# Scale: zoom level (1:scale)
openmap.Scale=3000000000f
# Projection type to start the map with.  Use the class name of the
# projection, such as com.bbn.openmap.proj.Mercator,
# com.bbn.openmap.proj.CADRG, com.bbn.openmap.proj.Orthgraphic,
# com.bbn.openmap.proj.LLXY or com.bbn.openmap.proj.Gnomonic
openmap.Projection=com.bbn.openmap.proj.Mercator

# APPLICATION WINDOW DIMENSIONS
# Width and Height of map, in pixels
openmap.Width=640
openmap.Height=480

# APPLICATION WINDOW TITLE
# Change this for a different title in the main window.
openmap.Title=OpenMap(tm)

# WINDOW STARTUP LOCATION
# pixel X/Y window position (if values < 0, then center the window on the screen)
openmap.x=-1
openmap.y=-1

# MAP BACKGROUND
# The background color of the map, in hex AARRGGBB values (AA is
# transparency, RR, GG and BB are red, green and blue in hex values
# between 00-FF (0-255)).
openmap.BackgroundColor=99B3CC

# Ironically, the "properties" property, which details where the
# PropertyHandler is looking for its properties, won't work here.

# ###################################################
# These are miscellaneous variables for the OpenMap application.
# ###################################################
# How to launch a browser to display additional information.
# Windows example: openmap.WebBrowser=C:\\program files\\internet explorer\\iexplore.exe
openmap.WebBrowser=/usr/bin/netscape -install
# Used for creating web pages for the browser
openmap.TempDirectory=/tmp
# Help web pages
openmap.HelpURL=http://openmap.bbn.com/doc/user-guide.html
# Use internal frames as an application - used to be gui.UseInternalFrames
openmap.UseInternalFrames=false

# DEBUGGING
# OpenMap has a Debug messaging mechanism that lets you set certain
# keywords as environment variables (-Ddebug.keyword) to enable
# printouts from different objects.  The code contains these keywords,
# and by looking at a class's code, you can figure out what the
# keywords are (look for Debug.message("keyword", "message") and 'if
# (Debug.debugging("keyword")' statements).  You can enable these
# messages by putting those keywords in a space-separated list in this
# property.  If you don't want extra messages, you can ignore this
# property and leave it empty.
#openmap.Debug=

# INTERNATIONALIZATION
# If you are interested in modifying OpenMap to display internationalized 
# strings (or to change the strings that are used in the application GIU), 
# These are the Debug flags that need to be set before the various components 
# start asking the BasicI18n class for the displayed strings.  The 'i18n.create'
# flag tells the BasicI8n class to track the strings in the locale set on the
# machine (for I18N_language_COUNTRY.properties files), and the 'i18n.default' 
# flag tells the BasicI8n class to only track generic properties (for 
# I18N.properties files).  To actually create the properties files, you have 
# to add the I18nFileCreateMenuItem to the application, look for that below.
#openmap.Debug=i18n.create i18n.default

# OPENMAP COMPONENTS
# ###################################################
# These properties define the general components to use in the
# application, OTHER than layers.  Notice the marker name list.  You
# can add and remove parts of the application here, simply by
# adjusting this marker name list and adding properties for that
# marker name.  Note the order in which menu objects are important,
# except helpMenu which is always adjusted to be the last menu item.
#
# If you want to remove components from the application, simply remove
# the marker name from the openmap.components list.  You don't have to
# delete the class definition property, too.  If you want to add a
# component to the list, add the marker name to the openmap.components
# list when you want it to be created and added relative to the other
# components, and then add a 'marker name'.class property for that
# component to this file.
# ###################################################

openmap.components=informationDelegator projFactory mouseDelegator projectionstack addlayer glc menulist toolBar navpanel zoompanel scalepanel projectionstacktool mouseModePanel deleteButton omdtl overviewMapHandler layersPanel selectMouseMode navMouseMode distanceMouseMode panMouseMode omdrawingtool omlineloader omcircleloader omrectloader ompointloader omsplineloader ompolyloader omscalingrasterloader omdistloader layerHandler projkeys repaintPolicy srl

# ###
# Applet components, also alternative component configuration
# with OMControlPanel on the left side of the applet. To enable this
# list, simply uncomment it.
# ###
#openmap.components=informationDelegator projFactory mouseDelegator projectionstack addlayer glc menulist toolBar mouseModePanel selectMouseMode navMouseMode distanceMouseMode omdtl deleteButton omdrawingtool omlineloader omcircleloader omrectloader ompointloader omsplineloader omdecsplineloader ompolyloader omscalingrasterloader omdistloader controlpanel layerHandler projkeys repaintPolicy srl

main.components=informationDelegator projFactory mouseDelegator addlayer glc menulist toolBar deleteButton omdtl overviewMapHandler layersPanel mouseMode omdrawingtool omlineloader omcircleloader omrectloader ompointloader omsplineloader ompolyloader omscalingrasterloader omdistloader layerHandler projkeys repaintPolicy srl scalepanel
main.activeWidgets.fillColor=BBBBBB

# ###################################################
# Menu configuration, defining the menu items listed in the
# openmap.components list.

menulist.class=com.bbn.openmap.gui.menu.MenuList
menulist.menus=fileMenu controlMenu navigateMenu layersMenu gotoMenu helpMenu
fileMenu.class=com.bbn.openmap.gui.FileMenu
controlMenu.class=com.bbn.openmap.gui.ControlMenu

# INTERNATIONALIZATION
# To get the BasicI18n class to create the internationalization property 
# files after you have set the Debug statements described above, you can add this 
# toolMenu to the menulist.menus list above:
toolMenu.class=com.bbn.openmap.gui.menu.OMBasicMenu
toolMenu.prettyName=Tools
toolMenu.mnemonic=T
toolMenu.items=i18ndump
i18ndump.class=com.bbn.openmap.gui.menu.I18nFileCreateMenuItem

###
# Adding a menu item to toggle on/off the OMControlPanel if it is
# added to the openmap.components list.
controlMenu.items=controlPanelToggle
controlPanelToggle.class=com.bbn.openmap.gui.menu.ControlPanelToggleMenuItem
###

navigateMenu.class=com.bbn.openmap.gui.NavigateMenu
layersMenu.class=com.bbn.openmap.gui.LayersMenu
gotoMenu.class=com.bbn.openmap.gui.GoToMenu
gotoMenu.addDefaults=true

### Add your own views to the GoToMenu
#gotoMenu.views=Argentina India United_States
#Argentina.latitude=-39.760445
#Argentina.longitude=-65.92294
#Argentina.name=Argentina
#Argentina.projection=Mercator
#Argentina.scale=5.0E7
#India.latitude=20.895763
#India.longitude=80.437485
#India.name=India
#India.projection=Mercator
#India.scale=3.86688E7
#United_States.latitude=38.82259
#United_States.longitude=-96.74999
#United_States.name=United States
#United_States.projection=Mercator
#United_States.scale=5.186114E7
###

helpMenu.class=com.bbn.openmap.gui.DefaultHelpMenu
helpMenu.items=helpUserMenuItem
helpUserMenuItem.class=com.bbn.openmap.gui.UserGuideMenuItems
helpUserMenuItem.class=com.bbn.openmap.gui.menu.WebSiteHelpMenuItem

# End menu item definitions
# ###################################################

# ###################################################
# Defining the other components in the openmap.components list:

# Key components, usually always want these.
mouseDelegator.class=com.bbn.openmap.MouseDelegator
informationDelegator.class=com.bbn.openmap.InformationDelegator
layerHandler.class=com.bbn.openmap.LayerHandler

# General function additions
projkeys.class=com.bbn.openmap.event.ProjMapBeanKeyListener
repaintPolicy.class=com.bbn.openmap.HintsMapBeanRepaintPolicy
repaintPolicy.renderingHints=KEY_ANTIALIASING
repaintPolicy.KEY_ANTIALIASING=VALUE_ANTIALIAS_ON
repaintPolicy.KEY_RENDERING=VALUE_RENDER_SPEED
projectionstack.class=com.bbn.openmap.proj.ProjectionStack
layersPanel.class=com.bbn.openmap.gui.LayersPanel
menuPanel.class=com.bbn.openmap.gui.MenuPanel
dndCatcher.class=com.bbn.openmap.tools.dnd.DefaultDnDCatcher
dropSupport.class=com.bbn.openmap.tools.dnd.DropListenerSupport
glc.class=com.bbn.openmap.plugin.graphicLoader.GraphicLoaderConnector

# Mouse handling components
mouseModePanel.class=com.bbn.openmap.gui.MouseModeButtonPanel
selectMouseMode.class=com.bbn.openmap.event.SelectMouseMode
distanceMouseMode.class=com.bbn.openmap.event.DistanceMouseMode
panMouseMode.class=com.bbn.openmap.event.PanMouseMode
# Floating number between 0-1, with 1 being opaque, default .5
panMouseMode.opaqueness=1
# True/false, to leave old map up behind panned version.
panMouseMode.leaveShadow=false
# There's a NavMouseMode, too.  This one defines boxes from center
navMouseMode.class=com.bbn.openmap.event.NavMouseMode2
nullMouseMode.class=com.bbn.openmap.event.NullMouseMode
# Only mouse mode in "Main" application
mouseMode.class=com.bbn.openmap.event.OMMouseMode

# Drawing tool parts
omdtl.class=com.bbn.openmap.tools.drawing.OMDrawingToolLauncher
omcircleloader.class=com.bbn.openmap.tools.drawing.OMCircleLoader
omdecsplineloader.class=com.bbn.openmap.tools.drawing.OMDecoratedSplineLoader
omdistloader.class=com.bbn.openmap.tools.drawing.OMDistanceLoader
omdrawingtool.class=com.bbn.openmap.tools.drawing.OMDrawingTool
omlineloader.class=com.bbn.openmap.tools.drawing.OMLineLoader
ompointloader.class=com.bbn.openmap.tools.drawing.OMPointLoader
ompolyloader.class=com.bbn.openmap.tools.drawing.OMPolyLoader
omrectloader.class=com.bbn.openmap.tools.drawing.OMRectLoader
omscalingrasterloader.class=com.bbn.openmap.tools.drawing.OMScalingRasterLoader
omsplineloader.class=com.bbn.openmap.tools.drawing.OMSplineLoader

# ##
# ToolPanel definitions for the first ToolPanel 'toolbar'
toolBar.class=com.bbn.openmap.gui.ToolPanel
# Tell the first ToolPanel to avoid putting the DrawingToolLayer GUI
# in it:
#toolBar.avoid=dtlayer

# ToolPanel definitions for the second ToolPanel 'toolbar2'
#toolBar2.class=com.bbn.openmap.gui.ToolPanel
# Tell the second ToolPanel that you only want it to put the
# DrawingToolLayer GUI in it:
#toolBar2.components=dtlayer

# You can set the location, but it interferes with the
# InformationDelegator. Undefined, the ToolPanel goes North, but then
# it interferes with the first ToolPanel.

#toolBar2.preferredLocation=SOUTH

# Specific Tools
navpanel.class=com.bbn.openmap.gui.NavigatePanel
deleteButton.class=com.bbn.openmap.gui.OMGraphicDeleteTool
projectionstacktool.class=com.bbn.openmap.gui.ProjectionStackTool
scalepanel.class=com.bbn.openmap.gui.ScaleTextPanel
zoompanel.class=com.bbn.openmap.gui.ZoomPanel

# ###

projFactory.class=com.bbn.openmap.proj.ProjectionFactory
projFactory.projectionLoaders=mercatorloader cadrgloader ortholoader llxyloader gnomonicloader
projFactory.mercatorloader.class=com.bbn.openmap.proj.MercatorLoader
projFactory.cadrgloader.class=com.bbn.openmap.proj.CADRGLoader
projFactory.ortholoader.class=com.bbn.openmap.proj.OrthographicLoader
projFactory.llxyloader.class=com.bbn.openmap.proj.LLXYLoader
projFactory.gnomonicloader.class=com.bbn.openmap.proj.GnomonicLoader

# Not used by default, in secondary openmap.components list, puts controls in panel left of map.
controlpanel.class=com.bbn.openmap.gui.OMControlPanel
controlpanel.OverviewMapHandler.overviewLayers=overviewLayer
controlpanel.OverviewMapHandler.isTool=false
controlpanel.OverviewMapHandler.overviewScaleFactor=30f
controlpanel.OverviewMapHandler.overviewMinScale=50000000f
controlpanel.OverviewMapHandler.overviewStatusLayer=com.bbn.openmap.layer.OverviewMapAreaLayer
controlpanel.OverviewMapHandler.lineColor=FFFF0000
controlpanel.OverviewMapHandler.fillColor=33FF0000
controlpanel.LayersPanel.controls=com.bbn.openmap.gui.LayerControlButtonPanel
controlpanel.LayersPanel.controls.orientation=horizontal
controlpanel.LayersPanel.controls.configuration=NORTH

# ###
# BeanPanel properties - the BeanPanel isn't defined in the
# openmap.components list above, you would add 'beanpanel' to that
# list and uncomment these properties:
# ###
#beanpanel.class=com.bbn.openmap.tools.beanbox.BeanPanel
#beanpanel.beans.path=path to directory containing jar files
#beanpanel.tabs=tab1 tab2 tab3
#beanpanel.tab1.name=Generic
#beanpanel.tab1.beans=com.bbn.openmap.examples.beanbox.SimpleBeanObject
#beanpanel.tab2.name=Container
#beanpanel.tab2.beans=com.bbn.openmap.examples.beanbox.SimpleBeanContainer
#beanpanel.tab3.name=Military
#beanpanel.tab3.beans=com.bbn.openmap.examples.beanbox.Fighter

# ###
# MIL-STD-2525B SYMBOLOGY COMPONENT
# SymbolReferenceLibrary properties - the SymbolReferenceLibrary
# openmap.components list above, you would add 'srl' to that
# list and uncomment these properties:
# ###
srl.class=com.bbn.openmap.tools.symbology.milStd2525.SymbolReferenceLibrary
# Uncomment the one that fits the dataset you are using
#srl.imageMakerClass=com.bbn.openmap.tools.symbology.milStd2525.SVGSymbolImageMaker
srl.imageMakerClass=com.bbn.openmap.tools.symbology.milStd2525.PNGSymbolImageMaker
# Optional property:
#srl.path= <path_to_svg_parent_directory if jar isn't used>

# Defining the DTED frame cache.  'dtedframecache' needs to be added
# to the openmap.components list, and the path to a dted directory
# needs to be modified to fit your installation.
dtedframecache.class=com.bbn.openmap.dataAccess.dted.DTEDFrameCache
dtedframecache.directoryHandlers=dted1
dtedframecache.dted1.path=/data/dted

# Defining a VPF VMAP level 0 tile cache. 'vpfcache' needs to be
# added to the openmap.components list, and the path to your vmap level
# 0 needs to be modified to fit your installation.  In the VPFLayer
# that uses this tile cache, the layer's libraryBean property would be
# set to VMAPLEVEL0, the name of this cache.
vpfcache.class=com.bbn.openmap.layer.vpf.LibraryBean
vpfcache.name=VMAPLEVEL0
vpfcache.vpfPath=/data/vpf/vmaplv0/disk0;/data/vpf/vmaplv0/disk1

# ###
# Properties defined for the overview map handler.
# ###
overviewMapHandler.class=com.bbn.openmap.gui.OverviewMapHandler
# marker name list defining background layers used on overview map.
# The layers are defined as any other layer is below, look
# for 'overviewLayer' properties.  This is a space-separated list of
# marker names.
overviewMapHandler.overviewLayers=overviewLayer
# how zoomed out to keep the overview map versus the main map
overviewMapHandler.overviewScaleFactor=10f
# when to stop zooming in
overviewMapHandler.overviewMinScale=10000000f
# the layer to use to render on top, showing where the main map covers.
overviewMapHandler.overviewStatusLayer=com.bbn.openmap.layer.OverviewMapAreaLayer
overviewMapHandler.lineColor=ffff0000
overviewMapHandler.fillColor=66ff0000
# ###

# The AddLayerPanel allows certain layers/plugins to be added to the
# application dynamically.  Only certain layers/plugin have been
# updated to be able to work with the Inspector to set their initial
# parameters.  The 'addlayer' marker name was added to the
# openmap.components list, and this component looks for the
# openmap.addableLayers property to figure out what layers to make
# available for dynamic addition.  To add a layer to this list, create
# a unique marker name for a generic instance of the layer, and then
# supply the <layername>.class field and <layername>.prettyName (see
# below) for that object.  The class name will be the type of
# layer/plugin created by the LayerAddPanel, and this prettyName will
# be the generic description of the layer presented to the user.  The
# user will have an opportunity to name the specific layer that gets
# created.

# Define the class for the component listed in the openmap.components
# list:
addlayer.class=com.bbn.openmap.gui.LayerAddPanel

# Define a list of addable layers:
openmap.addableLayers=shape grat utmgrid rpf shispi eipi wmsp epi

# Define the properties of the addable layers:
shape.class=com.bbn.openmap.layer.shape.ShapeLayer
shape.prettyName=Shape Layer
grat.class=com.bbn.openmap.layer.GraticuleLayer
grat.prettyName=Graticule Layer
utmgrid.class=com.bbn.openmap.plugin.UTMGridPlugIn
utmgrid.prettyName=UTM Grid Overlay
rpf.class=com.bbn.openmap.layer.rpf.RpfLayer
rpf.prettyName=RPF Layer
shispi.class=com.bbn.openmap.plugin.shis.SHISPlugIn
shispi.prettyName=Simple Http Image Server (SHIS) Plugin
eipi.class=com.bbn.openmap.plugin.earthImage.EarthImagePlugIn
eipi.prettyName=Earth Image Plugin
wmsp.class=com.bbn.openmap.plugin.wms.WMSPlugIn
wmsp.prettyName=WMS Layer
epi.class=com.bbn.openmap.plugin.esri.EsriPlugIn
epi.prettyName=Shape Layer with Attributes

# To test how fast your application redraws, use this and add anime to your 
# components list. A layer will be created for it, and the palette for the layer
# controls the component.  You can add sprites and adjust the redrawing timer. The
# GraphicLoaderConnector needs to be added to the components list as well.
anime.class=com.bbn.openmap.graphicLoader.AnimationTester

# End component definitions
# ###################################################

# IMAGE SERVER SETTINGS
# ###################################################
# These properties define the formatters the Simple Http 
# Image Server uses. The default formatter is the first one
# in the list.
# The layers property can be used to override the 
# openmap.startUpLayers property as the default layers.
# ###################################################

formatters=gif jpeg png png8 png32
gif.class =com.bbn.openmap.image.AcmeGifFormatter
jpeg.class=com.bbn.openmap.image.SunJPEGFormatter
png.class=com.bbn.openmap.image.PNGImageIOFormatter
png8.class=com.bbn.openmap.image.PNG8ImageFormatter
png32.class=com.bbn.openmap.image.PNG32ImageFormatter
#layers=date drawing daynight graticule shapePolitical

# ###################################################
# You can refer to other properties files and have their properties
# loaded as well.  This is good for defining a set of layers that work
# with a particular type of data, for instance, and then override some
# of those properties defined in those files to localize them for your
# setup.  This works with a marker name list.  By default, nothing defined.
# ###################################################

#openmap.include=include1 include2
#include1.URL=<http://whatever>
#include2.URL=<http://whatever>

# OPENMAP LAYERS
# ###################################################
# Here is the list of layers to add to the map.  The properties for
# each marker name are defined later.  
#
# If you want to remove a layer from the application, remove its
# marker name from the openmap.layers property list.  You do not have
# to delete all of its properties as well.
#
# If you want to add a layer to the application, add its marker name
# to the openmap.layers property list, and then add its properties to
# this file.  As a minimum, Layers all need a 'marker name'.class
# property, and a 'marker name'.prettyName property (for the GUI
# components).  Consult the JavaDocs for a layer to see what other
# properties can be set for that layer.
# ###################################################

# Layers listed here appear on the Map in the order of their names.
openmap.layers=date dtlayer distlayer daynight cities test graticule demo tiles shapePolitical

# If you get more data, you can add other layers defined in this file.
# You'll want to look at the properties for each layer and modify them
# as needed.  Check the javadocs for definitions of the available
# properties for each layer.

#openmap.layers=date daynight test graticule terrain demo dtedcov jdted jrpf shapePolitical ScaledPolitical ScaledFillPolitical

# These layers are turned on when the map is first started.  Order
# does not matter here...
openmap.startUpLayers=graticule drawing tiles shapePolitical

# ###################################################
# These are the properties for individual layers.  Consult the 
# javadocs (Java API pages) for the individual layers for options.
# ###################################################

### Drawing version of the EditorLayer.  An EditorLayer, when active,
### places tools in the ToolPanel that creates/manipulates the
### OMGraphics on this particular layer.
dtlayer.class=com.bbn.openmap.layer.editor.EditorLayer
dtlayer.prettyName=Drawing Layer
dtlayer.editor=com.bbn.openmap.layer.editor.DrawingEditorTool
#dtlayer.showAttributes=false
dtlayer.loaders=lines polys rects circles points
dtlayer.mouseModes=Gestures
dtlayer.distance.class=com.bbn.openmap.tools.drawing.OMDistanceLoader
dtlayer.lines.class=com.bbn.openmap.tools.drawing.OMLineLoader
dtlayer.polys.class=com.bbn.openmap.tools.drawing.OMPolyLoader
dtlayer.rects.class=com.bbn.openmap.tools.drawing.OMRectLoader
dtlayer.circles.class=com.bbn.openmap.tools.drawing.OMCircleLoader
dtlayer.points.class=com.bbn.openmap.tools.drawing.OMPointLoader

### Another Drawing version of the EditorLayer, with the editor set up
### to only create OMDistance objects.
distlayer.class=com.bbn.openmap.layer.editor.EditorLayer
distlayer.prettyName=Distance Layer
distlayer.showAttributes=false
distlayer.editor=com.bbn.openmap.layer.editor.DrawingEditorTool
distlayer.loaders=distance
distlayer.distance.class=com.bbn.openmap.tools.drawing.OMDistanceLoader
distlayer.distance.attributesClass=com.bbn.openmap.omGraphics.DrawingAttributes
distlayer.distance.lineColor=FFAA0000
distlayer.distance.mattingColor=66333333
distlayer.distance.matted=true

### Layer to catch Drag and Drop events from the DefaultDnDCatcher and
### DropListenerSupport
simpleBeanLayer.class=com.bbn.openmap.examples.beanbox.SimpleBeanLayer
simpleBeanLayer.prettyName=Simple Bean Layer

### Layer used by the overview handler
overviewLayer.class=com.bbn.openmap.layer.shape.ShapeLayer
overviewLayer.prettyName=Overview
overviewLayer.shapeFile=data/shape/dcwpo-browse.shp
overviewLayer.spatialIndex=data/shape/dcwpo-browse.ssx
overviewLayer.lineColor=ff000000
overviewLayer.fillColor=DAD5CB

###
# Demo layer - the layer's palette has a bunch of buttons to call
# the Drawing Tool.
demo.class=com.bbn.openmap.layer.DemoLayer
demo.prettyName=Demo

### 
# DrawingToolLayer - no palette, just a generic layer to catch
# graphics from the OMDrawingToolLauncher, and to call the OMDrawingTool
# to edit graphics already part of the layer.
drawing.class=com.bbn.openmap.layer.DrawingToolLayer
drawing.prettyName=Drawing Tool Layer
drawing.addToBeanContext=true

### ShapeFile layers
shapePolitical.class=com.bbn.openmap.layer.shape.ShapeLayer
shapePolitical.prettyName=Political Boundaries
# Specify shapefile and spatial-index file as a filename or pathname.
# If the former, you must reference the directory where this file
# lives in your CLASSPATH
#shapePolitical.shapeFile=data/shape/dcwpo-browse.shp
#shapePolitical.spatialIndex=data/shape/dcwpo-browse.ssx
shapePolitical.shapeFile=data/shape/cntry02/cntry02.shp
# Colors (32bit ARGB)
shapePolitical.lineColor=ff000000
shapePolitical.fillColor=DAD5CB
shapePolitical.renderPolicy=rp
shapePolitical.rp.class=com.bbn.openmap.layer.policy.PanningImageRenderPolicy
shapePolitical.background=true
shapePolitical.rules=1 2 3 4 5 6 7 8
# rule0 definition:
shapePolitical.1.key=COLOR_MAP
shapePolitical.1.op=equals
shapePolitical.1.val=1
shapePolitical.1.fillColor=F0F0F0
shapePolitical.1.render=true
shapePolitical.2.key=COLOR_MAP
shapePolitical.2.op=equals
shapePolitical.2.val=2
shapePolitical.2.fillColor=e9e9e9
shapePolitical.2.render=true
shapePolitical.3.key=COLOR_MAP
shapePolitical.3.op=equals
shapePolitical.3.val=3
shapePolitical.3.fillColor=e0e0e0
shapePolitical.3.render=true
shapePolitical.4.key=COLOR_MAP
shapePolitical.4.op=equals
shapePolitical.4.val=4
shapePolitical.4.fillColor=d9d9d9
shapePolitical.4.render=true
shapePolitical.5.key=COLOR_MAP
shapePolitical.5.op=equals
shapePolitical.5.val=5
shapePolitical.5.fillColor=d0d0d0
shapePolitical.5.render=true
shapePolitical.6.key=COLOR_MAP
shapePolitical.6.op=equals
shapePolitical.6.val=6
shapePolitical.6.fillColor=c9c9c9
shapePolitical.6.render=true
shapePolitical.7.key=COLOR_MAP
shapePolitical.7.op=equals
shapePolitical.7.val=7
shapePolitical.7.fillColor=c0c0c0
shapePolitical.7.render=true
shapePolitical.8.key=COLOR_MAP
shapePolitical.8.op=equals
shapePolitical.8.val=8
shapePolitical.8.fillColor=b9b9b9
shapePolitical.8.render=true

# ScaleFilterLayer switches between the layers at the transisition scales.
ScaledPolitical.class=com.bbn.openmap.layer.ScaleFilterLayer
ScaledPolitical.prettyName=Political Boundaries
# List 2 or more layers
ScaledPolitical.layers=ThinShapePolitical ShapePolitical
# List the transition scales to switch between layers
ScaledPolitical.transitionScales=5000000

# ScaleFilterLayer switches between the layers at the transisition scales.
ScaledFillPolitical.class=com.bbn.openmap.layer.ScaleFilterLayer
ScaledFillPolitical.prettyName=Political Areas
# List 2 or more layers
ScaledFillPolitical.layers=ThinShapeFillPolitical ShapeFillPolitical
# List the transition scales to switch between layers
ScaledFillPolitical.transitionScales=5000000

### ShapeFile layer, full resolution converted vmap political boundaries
ShapePolitical.class=com.bbn.openmap.layer.shape.ShapeLayer
ShapePolitical.prettyName=Political Edge
ShapePolitical.shapeFile=data/shape/vmap_edge.shp
ShapePolitical.spatialIndex=data/shape/vmap_edge.ssx

### ShapeFile layer, thinned converted vmap political boundaries
ThinShapePolitical.class=com.bbn.openmap.layer.shape.ShapeLayer
ThinShapePolitical.prettyName=Political Edge
ThinShapePolitical.shapeFile=data/shape/vmap_edge_thin.shp
ThinShapePolitical.spatialIndex=data/shape/vmap_edge_thin.ssx

### ShapeFile layer, full resolution converted vmap political areas
ShapeFillPolitical.class=com.bbn.openmap.layer.shape.ShapeLayer
ShapeFillPolitical.prettyName=Political Solid
ShapeFillPolitical.shapeFile=data/shape/vmap_area.shp
ShapeFillPolitical.spatialIndex=data/shape/vmap_area.ssx
ShapeFillPolitical.lineColor=BDDE83
ShapeFillPolitical.fillColor=BDDE83

### ShapeFile layer, thinned converted vmap political areas
ThinShapeFillPolitical.class=com.bbn.openmap.layer.shape.ShapeLayer
ThinShapeFillPolitical.prettyName=Political Solid
ThinShapeFillPolitical.shapeFile=data/shape/vmap_area_thin.shp
ThinShapeFillPolitical.spatialIndex=data/shape/vmap_area_thin.ssx
ThinShapeFillPolitical.lineColor=BDDE83
ThinShapeFillPolitical.fillColor=BDDE83

### ShapeFile layer, thinned converted vmap political boundaries,
# muiltiple shape files on one layer...
politicalCombo.class=com.bbn.openmap.layer.shape.MultiShapeLayer
politicalCombo.prettyName=Political Boundaries 2
politicalCombo.shapeFileList=pol_edges pol_fill

politicalCombo.pol_edges.shapeFile=data/shape/vmap_edge_thin.shp
politicalCombo.pol_edges.prettyName=Borders
politicalCombo.pol_edges.buffered=false

politicalCombo.pol_fill.shapeFile=data/shape/vmap_area_thin.shp
politicalCombo.pol_fill.prettyName=Areas
politicalCombo.pol_fill.lineColor=FFAAAA66
politicalCombo.pol_fill.fillColor=FFAAAA66
politicalCombo.pol_fill.buffered=false

### Graticule layer
graticule.class=com.bbn.openmap.layer.GraticuleLayer
graticule.prettyName=Graticule
# Show lat / lon spacing labels
graticule.showRuler=true
graticule.show1And5Lines=true
# Controls when the five degree lines and one degree lines kick in
#- when there is less than the threshold of ten degree lat or lon
#lines, five degree lines are drawn.  The same relationship is there
#for one to five degree lines.
graticule.threshold=2
# the color of 10 degree spacing lines (ARGB)
graticule.10DegreeColor=99000000
# the color of 5 degree spacing lines (ARGB)
graticule.5DegreeColor=99009900
# the color of 1 degree spacing lines (ARGB)
graticule.1DegreeColor=99003300
# the color of the equator (ARGB)
graticule.equatorColor=99FF0000
# the color of the international dateline (ARGB)
graticule.dateLineColor=99000000
# the color of the special lines (ARGB)
graticule.specialLineColor=99000000
# the color of the labels (ARGB)
graticule.textColor=99000000

### Date & Time layer
date.class=com.bbn.openmap.layer.DateLayer
date.prettyName=Date & Time
# display font as a Java font string
date.font=SansSerif-Bold
# like XWindows geometry: [+-]X[+-]Y, `+' indicates relative to
# left edge or top edges, `-' indicates relative to right or bottom
# edges, XX is x coordinate, YY is y coordinate
date.geometry=+20+30
# background rectangle color ARGB
date.color.bg=ff808080
# foreground text color ARGB
date.color.fg=ff000000
# date format (using java.text.SimpleDateFormat patterns)
date.date.format=EEE, d MMM yyyy HH:mm:ss z


### Day/Night shading layer properties
daynight.class=com.bbn.openmap.layer.daynight.DayNightLayer
daynight.prettyName=Day/Night Shading
# draw terminator as poly (faster calculation than image, defaults to
# true).
daynight.doPolyTerminator=true
# number of vertices for polygon terminator line.  this is only valid
# if doPolyTerminator is true...
daynight.terminatorVerts=512
# termFade - the distance of the transition of fade, as a percentage of PI.
daynight.termFade=.1
# currentTime - true to display the shading at the computer's current time.
daynight.currentTime=true
# updateInterval - time in milliseconds between updates.  currentTime has to be
# true for this to be used.  1000*60*5 = 300000 = 5min updates
daynight.updateInterval=300000
# Shading Colors (32bit ARGB)
daynight.nighttimeColor=64000000
daynight.daytimeColor=00FFFFFF

### Test layer
test.prettyName=Test
test.class=com.bbn.openmap.layer.test.TestLayer
test.line.visible=true
test.circ.visible=true
test.rect.visible=true
test.text.visible=true
test.poly.visible=true
#test.poly.vertices=80 -180 80 -90 80 0 80 90 80 180 70 180 70 90 70 0 70 -90 70 -180

### VMAP Political layer - Run the com.bbn.openmap.layer.vpf.VPFConfig
### class to create properties for a set of features.
vmapPolitical.class=com.bbn.openmap.layer.vpf.VPFLayer
vmapPolitical.prettyName=VMAP Political
vmapPolitical.vpfPath=data/vmap/vmaplv0
vmapPolitical.coverageType=bnd
vmapPolitical.featureTypes=edge area text
#  just display coastlines and political boundaries
#vmapPolitical.edge= polbndl coastl depthl
vmapPolitical.edge= polbndl coastl
#  just display political areas and not oceans
#vmapPolitical.area= oceansea polbnda
vmapPolitical.area= polbnda

# Use this property for a better focus on feature types, especially
# for more fine-grained databases
#vmapPolitical.searchByFeature=true

### VMAP Coastline layer
vmapCoast.class=com.bbn.openmap.layer.vpf.VPFLayer
vmapCoast.prettyName=VMAP Coastline Layer
vmapCoast.vpfPath=data/vmap/vmaplv0
## a predefined layer from the VPF predefined layer set found in
## com/bbn/openmap/layer/vpf/defaultVPFLayers.properties
vmapCoast.defaultLayer=vmapCoastline

# Basic political boundaries with DCW
dcwPolitical.class=com.bbn.openmap.layer.vpf.VPFLayer
dcwPolitical.prettyName=DCW Political Boundaries
dcwPolitical.vpfPath=path to DCW data
dcwPolitical.coverageType=po
dcwPolitical.featureTypes=edge area

# For creating other VPF layer definitions, use the
# com.bbn.openmap.layer.vpf.VPFConfig class, running it directly on a
# VPF data directory.  

# For instance, for inland water, the following properties could be
# used, and 'vmapIW' would be added to the openmap.layers property.

vmapIW.prettyName=VPF Inland Water
vmapIW.inwatera.selectColor=ff000000
vmapIW.searchByFeature=true
vmapIW.inwatera.lineWidth=1.0

# If you are using a VPF tile cache, specify the library bean name
# here:
vmapIW.libraryBean=VMAPLEVEL0
# Otherwise, you have to specify the path to the data (parent of the
# .lat file):
#vmapIW.vpfPath=/data/vpf/vmaplv0/disk0
vmapIW.inwatera.lineColor=ff000000
vmapIW.inwatera.dashPhase=
vmapIW.inwatera.textColor=ff000000
vmapIW.coverageType=hydro
vmapIW.inwatera.fillPattern=
vmapIW.class=com.bbn.openmap.layer.vpf.VPFLayer
vmapIW.area=inwatera
vmapIW.inwatera.fillColor=FF0000FF
vmapIW.featureTypes=area
vmapIW.inwatera.dashPattern=
vmapIW.inwatera.matted=false


### Java RPF properties
jrpf.class=com.bbn.openmap.layer.rpf.RpfLayer
jrpf.prettyName=CADRG
# This property should reflect the paths to the RPF directories
jrpf.paths=data/RPF
# Number between 0-255: 0 is transparent, 255 is opaque
jrpf.opaque=255
# Number of colors to use on the maps - 16, 32, 216
jrpf.number.colors=216
# Display maps on startup
jrpf.showmaps=true
# Display attribute information on startup
jrpf.showinfo=false
# Scale images to fit the map scale
jrpf.scaleImages=true
jrpf.coverage=true

### Another Java RPF Layer - usually keep CADRG and CIB separate,
# although you don't have to.
jcib.class=com.bbn.openmap.layer.rpf.RpfLayer
jcib.prettyName=CIB
# This property should reflect the paths to the RPF directories
jcib.paths=data/CIB/RPF
# Number between 0-255: 0 is transparent, 255 is opaque
jcib.opaque=255
# Number of colors to use on the maps - 16, 32, 216
jcib.number.colors=216
# Display maps on startup
jcib.showmaps=true
# Display attribute information on startup
jcib.showinfo=false
# Scale images to fit the map scale
jcib.scaleImages=true


### Java DTED Coverage properties
dtedcov.class=com.bbn.openmap.layer.dted.DTEDCoverageLayer
dtedcov.prettyName=DTED Coverage
# This property should reflect the paths to the DTED level 0 and 1 
# directories.  These levels can be combined.
dtedcov.paths=data/dted
# DTED Level 2 data!
dtedcov.level2.paths=data/dted2 
# Number between 0-255: 0 is transparent, 255 is opaque
dtedcov.opaque=255

# *NOTE* This property needs to be changed to specify a DTED coverage file,
# or the location where you want one created if the layer doesn't find
# it here.  If you add or remove coverage from your dted collection,
# you should delete this file so that an accurate one will be created.
dtedcov.coverageFile=<path to coverage file>

# This is an optional property. You can substitute a URL for the
# coverage file instead.  This is checked first before the coverage
# file, and if a valid file is found at the URL, then the coverage
# file is ignored.  The layer does not try to create a file at this
# URL!
#dtedcov.coverageURL=http://dstl.bbn.com/openmap/data/dted/coverage.dat

### Java DTED properties
jdted.class=com.bbn.openmap.layer.dted.DTEDLayer
jdted.prettyName=DTED
# This property should reflect the paths to the DTED level 0 and 1 
# directories.  These levels can be combined.
jdted.paths=data/dted
# DTED Level 2 data!
jdted.level2.paths=data/dted2
# Number between 0-255: 0 is transparent, 255 is opaque
jdted.opaque=255
# Number of colors to use on the maps - 16, 32, 216
jdted.number.colors=216
# Level of DTED data to use on startup (0, 1, 2)
jdted.level=0
# Type of display for the data on startup
# 0 = no shading at all
# 1 = greyscale slope shading
# 2 = band shading, in meters
# 3 = band shading, in feet
# 4 = subframe testing
# 5 = elevation, colored
jdted.view.type=5
# Contrast setting on startup, 1-5
jdted.contrast=3
# height (meters or feet) between color changes in band shading on startup
jdted.band.height=25
# Minimum scale to display images. Larger numbers mean smaller scale, 
# and are more zoomed out.
jdted.min.scale=20000000

###
# Java DTED Layer that uses the central DTEDFrameCache.  The
# DTEDFrameCache has to be added to the openmap.components list.
jdted2.class=com.bbn.openmap.layer.dted.DTEDFrameCacheLayer
jdted2.prettyName=DTED
# and are more zoomed out.
jdted2.min.scale=50000000
jdted2.generators=greys colors band
jdted2.greys.class=com.bbn.openmap.omGraphics.grid.SlopeGeneratorLoader
jdted2.greys.prettyName=Slope Shading
jdted2.greys.colorsClass=com.bbn.openmap.omGraphics.grid.GreyscaleSlopeColors
jdted2.colors.class=com.bbn.openmap.omGraphics.grid.SlopeGeneratorLoader
jdted2.colors.prettyName=Elevation Shading
jdted2.colors.colorsClass=com.bbn.openmap.omGraphics.grid.ColoredShadingColors
jdted2.band.class=com.bbn.openmap.omGraphics.grid.ElevationBandGeneratorLoader
jdted2.band.prettyName=Elevation Bands
jdted2.band.colorsClass=com.bbn.openmap.omGraphics.grid.GreyscaleSlopeColors

###
# Terrain layer.  Requires the DTEDFrameCache being added to the
# openmap.components list.
terrain.class=com.bbn.openmap.layer.terrain.TerrainLayer
terrain.prettyName=Terrain Tools
# The default tool to use for the terrain layer.  Can be PROFILE or LOS.
terrain.default.mode=PROFILE

###
# PlugIn layer with a samplePlugIn marker name - comments are commented out!
#samplePlugIn.class=com.bbn.openmap.plugin.PlugInLayer
#samplePlugIn.prettyName=Earth At Night
#samplePlugIn.plugin=<path to PlugIn class>
# Then, plugin properties as needed, with layer marker name.plugin
# prefix.  These depend on the PlugIn, and you should consult the
# JavaDocs for that PlugIn class for specifics.
#samplePlugIn.plugin.property1=value
#samplePlugIn.plugin.property2=value

###
# LocationLayer that holds cities.  The palette for this layer lets
# you turn on the names and declutter matrix, if you want.  The
# declutter matrix can get expensive at small scales.
cities.class=com.bbn.openmap.layer.location.LocationLayer
cities.prettyName=World Cities 
cities.locationHandlers=csvcities
cities.useDeclutter=false
cities.declutterMatrix=com.bbn.openmap.layer.DeclutterMatrix

csvcities.class=com.bbn.openmap.layer.location.csv.CSVLocationHandler
csvcities.prettyName=World Cities
csvcities.locationFile=data/cities.csv
csvcities.csvFileHasHeader=true
csvcities.locationColor=FF0000
csvcities.nameColor=008C54
csvcities.showNames=false
csvcities.showLocations=true
csvcities.nameIndex=0
csvcities.latIndex=5
csvcities.lonIndex=4
csvcities.csvFileHasHeader=true

# Map Tile Layer, using OpenStreetMap tiles
tiles.class=com.bbn.openmap.layer.imageTile.MapTileLayer
tiles.prettyName=World Map
# StandardMapTileFactory can be used if tiles stored locally
#tiles.tileFactory=com.bbn.openmap.dataAccess.mapTile.StandardMapTileFactory
# Would define root directory of tiles
#tiles.rootDir=tiles
tiles.fileExt=.png

# Can also define server
tiles.tileFactory=com.bbn.openmap.dataAccess.mapTile.ServerMapTileFactory
# Don't abuse this server!
tiles.rootDir=http://tah.openstreetmap.org/Tiles/tile
# Store tiles locally, to reduce load on server
tiles.localCacheRootDir=/data/tiles/osmtiles

# What to do about empty tiles for bottom-most layer?  Set 
# up handler. Saves disk space for tile storage. Usually 
# only applies for homegrown tile sets. Upper tile layers 
# will probably want to have nothing set for handler, so no tiles are clear
tiles.emptyTileHandler=com.bbn.openmap.dataAccess.mapTile.ShpFileEmptyTileHandler
# Define ocean/background colors for tiles
tiles.background.fillColor=FFFFFF
tiles.background.lineColor=FFFFFF
# Define land color for tiles (empty tiles on land, too)
tiles.land.fillColor=DECD8B
tiles.land.lineColor=DECD8B
# Define zoom level to limit handler response - zoom in past this provides empty coverage (clear)
tiles.noCoverageZoom=13
# Use shape file to determine which tiles are over land.
tiles.shpFile=data/shape/cntry02/cntry02.shp