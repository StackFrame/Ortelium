// **********************************************************************
// 
// <copyright>
// 
//  BBN Technologies, a Verizon Company
//  10 Moulton Street
//  Cambridge, MA 02138
//  (617) 873-8000
// 
//  Copyright (C) BBNT Solutions LLC. All rights reserved.
// 
// </copyright>
// **********************************************************************
// 
// $Source: /cvs/distapps/openmap/src/corba/com/bbn/openmap/layer/specialist/Specialist.idl,v $
// $RCSfile: Specialist.idl,v $
// $Revision: 1.2 $
// $Date: 2003/05/07 20:56:59 $
// $Author: dietrick $
// 
// **********************************************************************


#ifndef Specialist_idl
#define Specialist_idl

// ----------------------------------------------------------------------
//  The Specialist.
// ----------------------------------------------------------------------
module CSpecialist {

// ----------------------------------------------------------------------
// Core Typedefs
// ----------------------------------------------------------------------
   typedef sequence<string> strings;

// ----------------------------------------------------------------------
//  Basic Structures
// ----------------------------------------------------------------------
    const string Revision = "@(#)$Header: /cvs/distapps/openmap/src/corba/com/bbn/openmap/layer/specialist/Specialist.idl,v 1.2 2003/05/07 20:56:59 dietrick Exp $";
    
    struct XYPoint {
	short x;
	short y;
    };
    
    struct LLPoint {
	float lat;
	float lon;
    };

    struct CTEntry {
        unsigned short red;
	unsigned short green;
	unsigned short blue;
	unsigned short open;
    };

    
    interface CColor;
    interface CColor {
	attribute unsigned short red;
	attribute unsigned short green;
	attribute unsigned short blue;

        struct EColor {
	    CColor color;
	    unsigned short red;
	    unsigned short green;
	    unsigned short blue;
	};
	EColor fill();
    };

    typedef sequence<CTEntry> colorTable;
    typedef sequence<octet> binarydata;
    typedef sequence<octet> pixeldata;

    interface CStipple;
    interface CStipple {
	readonly attribute unsigned short height;
	readonly attribute unsigned short width;
	readonly attribute binarydata data;

	struct EStipple
	{
	    CStipple stipple;
	    unsigned short height;
	    unsigned short width;
	    binarydata data;
	};
	EStipple fill();
    };
    
    struct CProjection {
	short kind;			// ProjType (PT_Mercator...)
	LLPoint center;
	unsigned short height;
	unsigned short width;
	unsigned long scale;
    };

    //------------------------------------------------------------
    //  Graphic Objects
    //------------------------------------------------------------

    interface Comp;
    struct EComp {
        Comp comp;
        string cID;
    };

    interface Graphic;
    interface Graphic {
	enum GraphicType {
	    GT_Graphic,   
	    GT_Bitmap,
	    GT_Text,
	    GT_Poly,
	    GT_Line,
	    GT_UnitSymbol,
	    GT_2525Symbol,
	    GT_Rectangle,
	    GT_Circle,
	    GT_Raster,
	    GT_ForceArrow,
	    GT_NewGraphic,	//used only in UpdateGraphic unions
	    GT_ReorderGraphic	//used only in UpdateGraphic unions
	};

	enum RenderType {
	    RT_Unknown,
	    RT_LatLon,
	    RT_XY,
	    RT_Offset
	};

	enum LineType {
	    LT_Unknown,
	    LT_Straight,
	    LT_Rhumb,
	    LT_GreatCircle
	};

	enum DeclutterType {
	    DC_None,          //no decluttering
	    DC_Space,         //object takes up space, not moved
	    DC_Move,          //object takes up space and moved
	    DC_Line           //object takes up space, moved, line drawn to
        };                    //  original spot

	readonly attribute string gID;
	readonly attribute GraphicType gType;
	attribute Comp obj;
	attribute LineType lType;
	attribute RenderType rType;
	attribute CColor color;
	attribute CColor fillColor;
	attribute unsigned short lineWidth;
        attribute CStipple stipple;
	attribute CStipple fillStipple;
	attribute DeclutterType dcType;    //gestures don't affect 
                                           //  decluttering, timing issue

	enum settableFields {
	    GF_object,
	    GF_lType,
	    GF_rType,
	    GF_color,
	    GF_fillColor,
	    GF_lineWidth,
	    GF_stipple,
	    GF_fillStipple
	};
	union GF_update switch (settableFields) {
	  case GF_object: EComp obj;
	  case GF_lType: Graphic::LineType lType;
	  case GF_rType: Graphic::RenderType rType;
	  case GF_color: CColor::EColor color;
	  case GF_fillColor: CColor::EColor fillColor;
	  case GF_lineWidth: unsigned short lineWidth;
	  case GF_stipple: CStipple::EStipple stipple;
	  case GF_fillStipple: CStipple::EStipple fillStipple;
	};
	struct EGraphic {
	    Graphic graph;
	    EComp obj;
	    string gID;
	    Graphic::LineType lType;
	    Graphic::GraphicType gType;
	    Graphic::RenderType rType;
	    CColor::EColor color;
	    CColor::EColor fillColor;
	    unsigned short lineWidth;
	    CStipple::EStipple stipple;
	    CStipple::EStipple fillStipple;
	    Graphic::DeclutterType dcType;
	};
	EGraphic gfill();
    };

    typedef sequence<Graphic> GraphicSeq;

    typedef sequence<XYPoint> XYPointSeq;
    typedef sequence<LLPoint> LLPointSeq;

    interface Bitmap : Graphic {
	attribute XYPoint p1;
	attribute LLPoint ll1;
	attribute unsigned short width;
	attribute unsigned short height;
	attribute unsigned short x_hot;
	attribute unsigned short y_hot;
	attribute binarydata bits;
	attribute CStipple bmref;

	enum settableFields {
	    BF_p1,
	    BF_ll1,
	    BF_width,
	    BF_height,
	    BF_x_hot,
	    BF_y_hot,
	    BF_bits,
	    BF_bmref
	};
	union BF_update switch (settableFields) {
	  case BF_p1: XYPoint p1;
	  case BF_ll1: LLPoint ll1;
	  case BF_width: unsigned short width;
	  case BF_height: unsigned short height;
	  case BF_x_hot: unsigned short x_hot;
	  case BF_y_hot: unsigned short y_hot;
	  case BF_bits: binarydata bits;
	  case BF_bmref: CStipple bmref;
	};
        struct EBitmap {
	    Graphic::EGraphic egraphic;
	    XYPoint p1;
	    LLPoint ll1;
	    unsigned short width;
	    unsigned short height;
	    unsigned short x_hot;
	    unsigned short y_hot;
	    binarydata bits;
	    string bmref;	    /*previous definition - CStipple bmref;*/
	};	
	EBitmap fill();
    };

    interface Poly : Graphic {
	enum CoordMode {
	    CModeOrigin,	/* relative to the origin */
	    CModePrevious	/* relative to previous point */
	};

	attribute LLPoint ll1;
	attribute CoordMode cMode;
	attribute XYPointSeq xypoints;
	attribute LLPointSeq llpoints;

	enum settableFields {
	    PF_ll1,
	    PF_cMode,
	    PF_xypoints,
	    PF_llpoints
	};
	union PF_update switch (settableFields) {
	  case PF_ll1: LLPoint ll1;
	  case PF_cMode: CoordMode cMode;
	  case PF_xypoints: XYPointSeq xypoints;
	  case PF_llpoints: LLPointSeq llpoints;
	};
        struct EPoly {
	    Graphic::EGraphic egraphic;
	    LLPoint ll1;
	    Poly::CoordMode cMode;
	    XYPointSeq xypoints;
	    LLPointSeq llpoints;
	};
	EPoly fill();
    };

    interface Text : Graphic {
	attribute XYPoint p1;
	attribute LLPoint ll1;
	attribute string data;
	attribute string font;
	attribute short justify;

	enum settableFields {
	    TF_p1,
	    TF_ll1,
	    TF_data,
	    TF_font,
	    TF_justify
	};
	union TF_update switch (settableFields) {
	  case TF_p1: XYPoint p1;
	  case TF_ll1: LLPoint ll1;
	  case TF_data: string data;
	  case TF_font: string font;
	  case TF_justify: short justify;
	};
        struct EText {
	    Graphic::EGraphic egraphic;
	    XYPoint p1;
	    LLPoint ll1;
	    string data;
	    string font;
	    short justify;
	};
	EText fill();
    };

    interface Line : Graphic {
	attribute XYPoint p1;
	attribute XYPoint p2;
	attribute LLPoint ll1;
	attribute LLPoint ll2;

	enum settableFields {
	    LF_p1,
	    LF_p2,
	    LF_ll1,
	    LF_ll2
	};
	union LF_update switch (settableFields) {
	  case LF_p1: XYPoint p1;
	  case LF_p2: XYPoint p2;
	  case LF_ll1: LLPoint ll1;
	  case LF_ll2: LLPoint ll2;
	};
        struct ELine {
	    Graphic::EGraphic egraphic;
	    XYPoint p1;
	    XYPoint p2;
	    LLPoint ll1;
	    LLPoint ll2;
	};
	ELine fill();
    };

    interface UnitSymbol : Graphic {
	attribute XYPoint p1;
	attribute LLPoint ll1;
	attribute string group;
	attribute string symbol;
	attribute string echelon;
	attribute string left1;
	attribute string left2;
	attribute string left3;
	attribute string left4;
	attribute string right1;
	attribute string right2;
	attribute string right3;
	attribute string right4;
	attribute string top1;
	attribute string bottom1;
	attribute unsigned short nom_size;  	// nominal size is in pixels
	attribute unsigned short min_size;  	// minimal size is in pixels
	attribute unsigned short max_size;  	// maximum size is in pixels
	attribute unsigned long scale;	// scale at which size is nom_size
	attribute boolean is_hq;	// Headquarters mark display
	attribute float rotate;		// rotate unit 0.0 -> 180.0 degrees

	enum settableFields {
	    USF_p1,
	    USF_ll1,
	    USF_group,
	    USF_symbol,
	    USF_echelon,
	    USF_left1,
	    USF_left2,
	    USF_left3,
	    USF_left4,
	    USF_right1,
	    USF_right2,
	    USF_right3,
	    USF_right4,
	    USF_top1,
	    USF_bottom1,
	    USF_nom_size,
	    USF_min_size,
	    USF_max_size,
	    USF_scale,
	    USF_is_hq,
	    USF_rotate
	};
	union USF_update switch (settableFields) {
	  case USF_p1: XYPoint p1;
	  case USF_ll1: LLPoint ll1;
	  case USF_group: string group;
	  case USF_symbol: string symbol;
	  case USF_echelon: string echelon;
	  case USF_left1: string left1;
	  case USF_left2: string left2;
	  case USF_left3: string left3;
	  case USF_left4: string left4;
	  case USF_right1: string right1;
	  case USF_right2: string right2;
	  case USF_right3: string right3;
	  case USF_right4: string right4;
	  case USF_top1: string top1;
	  case USF_bottom1: string bottom1;
	  case USF_nom_size: unsigned short nom_size;
	  case USF_min_size: unsigned short min_size;
	  case USF_max_size: unsigned short max_size;
	  case USF_scale: unsigned long scale;
	  case USF_is_hq: boolean is_hq;
	  case USF_rotate: float rotate;
	};
	struct EUnitSymbol {
	    Graphic::EGraphic egraphic;
	    XYPoint p1;
	    LLPoint ll1;
	    string group;
	    string symbol;
	    string echelon;
	    string left1;
	    string left2;
	    string left3;
	    string left4;
	    string right1;
	    string right2;
	    string right3;
	    string right4;
	    string top1;
	    string bottom1;
	    unsigned short nom_size;
	    unsigned short min_size;
	    unsigned short max_size;
	    unsigned long scale;
	    boolean is_hq;
	    float rotate;
	};
	EUnitSymbol fill();    
    };
    
    interface U2525Symbol : Graphic {
	attribute XYPoint p1;
	attribute LLPoint ll1;
	attribute string symbol;
	attribute char confirmed;
	attribute char reduced;
	attribute boolean is_hq;	       	// Headquarters mark display
	attribute string movement;
	attribute string left2;
	attribute string left4;
	attribute string right2;
	attribute string right3;
	attribute string right4;
	attribute string bottom1;
	attribute unsigned short nom_size;	// nominal size is in pixels
	attribute unsigned short min_size;	// minimal size is in pixels
	attribute unsigned short max_size;	// maximum size is in pixels
	attribute unsigned long scale;	// scale at which size is nom_size
	attribute float rotate;                 // rotate 2525 0.0 -> 180.0 degrees
	enum settableFields {
	    U2525F_p1,
	    U2525F_ll1,
	    U2525F_symbol,
	    U2525F_confirmed,
	    U2525F_reduced,
	    U2525F_movement,
	    U2525F_left2,
	    U2525F_left4,
	    U2525F_right2,
	    U2525F_right3,
	    U2525F_right4,
	    U2525F_bottom1,
	    U2525F_nom_size,
	    U2525F_min_size,
	    U2525F_max_size,
	    U2525F_scale,
	    U2525F_is_hq,
	    U2525F_rotate
	};
	union U2525F_update switch (settableFields) {
	  case U2525F_p1: XYPoint p1;
	  case U2525F_ll1: LLPoint ll1;
	  case U2525F_symbol: string symbol;
	  case U2525F_confirmed: char confirmed;
	  case U2525F_reduced: char reduced;
	  case U2525F_movement: string movement;
	  case U2525F_left2: string left2;
	  case U2525F_left4: string left4;
	  case U2525F_right2: string right2;
	  case U2525F_right3: string right3;
	  case U2525F_right4: string right4;
	  case U2525F_bottom1: string bottom1;
	  case U2525F_nom_size: unsigned short nom_size;
	  case U2525F_min_size: unsigned short min_size;
	  case U2525F_max_size: unsigned short max_size;
	  case U2525F_scale: unsigned long scale;
	  case U2525F_is_hq: boolean is_hq;
	  case U2525F_rotate: float rotate;
	};
	struct E2525Symbol {
	    Graphic::EGraphic egraphic;
	    XYPoint p1;
	    LLPoint ll1;
	    string symbol;
	    char confirmed;
	    char reduced;
	    string movement;
	    string left2;
	    string left4;
	    string right1;
	    string right2;
	    string right3;
	    string right4;
	    string bottom1;
	    unsigned short nom_size;
	    unsigned short min_size;
	    unsigned short max_size;
	    unsigned long scale;
	    boolean is_hq;
	    float rotate;
	};
	E2525Symbol fill();
    };
    
    interface Rectangle : Graphic {
	attribute XYPoint p1;
	attribute XYPoint p2;
	attribute LLPoint ll1;
	attribute LLPoint ll2;

	enum settableFields {
	    RF_p1,
	    RF_p2,
	    RF_ll1,
	    RF_ll2
	};
	union RF_update switch (settableFields) {
	  case RF_p1: XYPoint p1;
	  case RF_p2: XYPoint p2;
	  case RF_ll1: LLPoint ll1;
	  case RF_ll2: LLPoint ll2;
	};
        struct ERectangle {
	    Graphic::EGraphic egraphic;
	    XYPoint p1;
	    XYPoint p2;
	    LLPoint ll1;
	    LLPoint ll2;
	};
	ERectangle fill();
    };
    
    interface Circle : Graphic {
	attribute XYPoint p1;
	attribute LLPoint ll1;
	attribute float major;
	attribute float minor;
	attribute unsigned short width;
	attribute unsigned short height;

	enum settableFields {
	    CF_p1,
	    CF_ll1,
	    CF_major,
	    CF_minor,
	    CF_width,
	    CF_height
	};
	union CF_update switch (settableFields) {
	  case CF_p1: XYPoint p1;
	  case CF_ll1: LLPoint ll1;
	  case CF_major: float major;
	  case CF_minor: float minor;
	  case CF_width: unsigned short width;
	  case CF_height: unsigned short height;
	};
        struct ECircle {
	    Graphic::EGraphic egraphic;
	    XYPoint p1;
	    LLPoint ll1;
	    float major;
	    float minor;
	    unsigned short width;
	    unsigned short height;
	  
	};
	ECircle fill();
    }; 

    interface Raster : Graphic {
	attribute XYPoint p1;
	attribute LLPoint ll1;
	attribute pixeldata pixels;
	attribute unsigned short width;
	attribute unsigned short height;
	attribute unsigned short x_hot;
	attribute unsigned short y_hot;
	attribute unsigned short colorsTotal;
	attribute colorTable ct;
	attribute unsigned short transparent;

	enum settableFields {
	    RASF_p1,
	    RASF_ll1,
	    RASF_pixels,
	    RASF_width,
	    RASF_height,
	    RASF_x_hot,
	    RASF_y_hot,
	    RASF_colorsTotal,
	    RASF_ct,
	    RASF_openColors,
	    RASF_transparent
	};
	union RASF_update switch (settableFields) {
	    case RASF_p1: XYPoint p1;
	    case RASF_ll1: LLPoint ll1;
	    case RASF_pixels: pixeldata pixels;
	    case RASF_width: unsigned short width;
	    case RASF_height: unsigned short height;
	    case RASF_x_hot: unsigned short x_hot;
	    case RASF_y_hot: unsigned short y_hot;
	    case RASF_colorsTotal: unsigned short colorsTotal;
	    case RASF_ct: colorTable ct;
	    case RASF_transparent: unsigned short transparent;
	};
	struct ERaster {
	    Graphic::EGraphic egraphic;
	    XYPoint p1;
	    LLPoint ll1;
            pixeldata pixels;
            unsigned short width;
            unsigned short height;
	    unsigned short x_hot;
	    unsigned short y_hot;
            unsigned short colorsTotal;
            colorTable ct;
            unsigned short transparent;
	};
	ERaster fill();
    };

    interface ForceArrow : Graphic {

	attribute XYPoint p1;
	attribute XYPoint p2;
	attribute XYPoint p3;
	attribute LLPoint ll1;
	attribute LLPoint ll2;
	attribute LLPoint ll3;
	attribute LLPoint offset;

	enum settableFields {
	    FAF_p1,
	    FAF_p2,
	    FAF_p3,
	    FAF_ll1,
	    FAF_ll2,
	    FAF_ll3,
	    FAF_offset
	};
	union FAF_update switch (settableFields) {
	  case FAF_p1: XYPoint p1;
	  case FAF_p2: XYPoint p2;
	  case FAF_p3: XYPoint p3;
	  case FAF_ll1: LLPoint ll1;
	  case FAF_ll2: LLPoint ll2;
	  case FAF_ll3: LLPoint ll3;
	  case FAF_offset: LLPoint offset;
	};
        struct EForceArrow {
	    Graphic::EGraphic egraphic;
	    XYPoint p1;
	    XYPoint p2;
	    XYPoint p3;
	    LLPoint ll1;
	    LLPoint ll2;
	    LLPoint ll3;
	    LLPoint offset;
	};
	EForceArrow fill();
    };
    
    union UGraphic switch (Graphic::GraphicType) {
      case Graphic::GT_Bitmap: Bitmap::EBitmap ebit;
      case Graphic::GT_Text: Text::EText etext;
      case Graphic::GT_Poly: Poly::EPoly epoly;
      case Graphic::GT_Line: Line::ELine eline;
      case Graphic::GT_UnitSymbol: UnitSymbol::EUnitSymbol eunit;
      case Graphic::GT_2525Symbol: U2525Symbol::E2525Symbol e2525;
      case Graphic::GT_Rectangle: Rectangle::ERectangle erect;
      case Graphic::GT_Circle: Circle::ECircle ecirc;
      case Graphic::GT_Raster: Raster::ERaster eras;
      case Graphic::GT_ForceArrow: ForceArrow::EForceArrow efarrow;
    };
    typedef sequence<UGraphic> UGraphicSeq;

    enum ReorderType {
      RT_Raise,		// Like doing a RaiseGraphic callback
      RT_Lower,		// Like doing a LowerGraphic callback
      RT_Delete		// Remove graphic from drawing list
    };
      
    union UpdateGraphic switch (Graphic::GraphicType) {
      case Graphic::GT_Graphic: Graphic::GF_update gf_update;
      case Graphic::GT_Bitmap: Bitmap::BF_update bf_update;
      case Graphic::GT_Text: Text::TF_update tf_update;
      case Graphic::GT_Poly: Poly::PF_update pf_update;
      case Graphic::GT_Line: Line::LF_update lf_update;
      case Graphic::GT_UnitSymbol: UnitSymbol::USF_update usf_update;
      case Graphic::GT_2525Symbol: U2525Symbol::U2525F_update u2525f_update;
      case Graphic::GT_Rectangle: Rectangle::RF_update rf_update;
      case Graphic::GT_Circle: Circle::CF_update cf_update;
      case Graphic::GT_Raster: Raster::RASF_update rasf_update;
      case Graphic::GT_ForceArrow: ForceArrow::FAF_update faf_update;
      case Graphic::GT_NewGraphic: UGraphic new_graphic;
      case Graphic::GT_ReorderGraphic: ReorderType reorder_kind;
    };
    typedef sequence<UpdateGraphic> UpdateGraphicSeq;
    struct UpdateRecord {
	string gID;
	UpdateGraphicSeq objectUpdates;
    };
    typedef sequence<UpdateRecord> GUpdate;

    //------------------------------------------------------------
    //  Gesture Unions
    //------------------------------------------------------------

    enum MouseType {
      ClickEvent,
      MotionEvent,
      KeyEvent,
      MapViewChangeEvent
    };

    struct key_modifiers {
      boolean alt;
      boolean shift;
      boolean control;
    };
	
    struct Mouse {
      XYPoint point;
      LLPoint llpoint;
      unsigned short mousebutton;
      boolean press;  //true for press, false for release
      key_modifiers modifiers;
    };

    struct Keypress {
      XYPoint point;
	//LLPoint llpoint;  implement for consistency?
      char key;
      key_modifiers modifiers;
    };

    struct MapViewHolder{
	//This is not currently used for anything
	LLPoint nwcorner;
	LLPoint secorner;
    };
    
    union MouseEvent switch (MouseType) {
      case ClickEvent: Mouse click;
      case MotionEvent: Mouse motion;
      case KeyEvent: Keypress keypress;
      case MapViewChangeEvent: MapViewHolder mapviewchange;
    };

    enum ActionType {
      UpdateGraphics,		// Update screen graphics
      UpdatePalette,		// Update the layer's palette
      InfoText,			// Display info on browser status line
      PlainText,		// Display additional text info (non-html)
      HTMLText,			// Display additional text info (HTML)
      URL			// Send web browser to a URL
    };

    union ActionUnion switch (ActionType) {
      case UpdateGraphics: GUpdate ginfo;
      case InfoText: string itext;
      case PlainText: string ptext;
      case HTMLText: string htext;
	//case UpdatePalette: PUpdate pinfo;
      case URL: string url;
    };
      
    // Don't put more than 1 thing of each type in the sequence...
    typedef sequence<ActionUnion> ActionSeq;

    // ----------------------------------------------------------------------
    // Gesture Interfaces
    //
    //  Gestures can happen on graphics or on the map (the Server
    //  object declared later). 
    // ----------------------------------------------------------------------

    interface Comp {
	ActionSeq sendGesture(in MouseEvent gesture, in string uniqueID);
	readonly attribute string cID;
	EComp fill();
    };
    
    interface InfoComp : Comp {
	readonly attribute string info;
	readonly attribute string iurl;
	readonly attribute string ptext;
	readonly attribute string htext;
    };
    


    // ----------------------------------------------------------------------
    //  Palette Widget Interfaces
    // ----------------------------------------------------------------------
    
    struct CheckButton
    {
      string button_label;
      boolean checked;
    };
    typedef sequence<CheckButton> CheckButtons;
    interface CheckBox;
    interface CheckBox
      {
	attribute string label;
	attribute CheckButtons buttons;
	oneway void selected(in string box_label, 
		      in CheckButton button, in string uniqueID);
      };

    interface RadioBox;
    interface RadioBox
      {
	attribute string label;
	attribute strings buttons;
	attribute string selected_button;
	oneway void selected(in string box_label, 
		      in string selected_button, 
		      in string uniqueID);
      };

    interface ListBox;
    interface ListBox
      {
	attribute string label;
	attribute strings contents;
	attribute string highlighted_item;  
	oneway void selected(in string box_label, 
		      in string selected_item, in string uniqueID);
      };

    interface ButtonBox;
    interface ButtonBox
     {
       attribute string label;
       attribute strings buttons;
       oneway void pressed(in string box_label, 
		    in string button_pressed, in string uniqueID);
     };
  
    interface Slider;
    interface Slider
     {
       attribute string label;
       attribute short start;
       attribute short end;
       attribute short value; //initial position, between start and end
       attribute boolean vertical;
       oneway void set(in string label, in short new_setting, in string uniqueID);
     };

    interface TextBox;
    interface TextBox
    {
      attribute string label;
      attribute string contents;
      oneway void pressed(in string box_label,
		   in string new_contents, in string uniqueID);
    };

    enum WidgetType
    {
      WT_CheckBox,
      WT_RadioBox,
      WT_Slider,
      WT_ButtonBox,
      WT_ListBox,
      WT_TextBox
    };

    union UWidget switch (WidgetType)
    {
       case WT_CheckBox: CheckBox cb;
       case WT_RadioBox: RadioBox rb;
       case WT_Slider:   Slider slide;
       case WT_ButtonBox:ButtonBox bb;
       case WT_ListBox:  ListBox lb;
       case WT_TextBox:  TextBox tb;
    };

    typedef sequence<UWidget> UWidgetSeq;
    

    // ----------------------------------------------------------------------
    //  Notify interfaces - (mattserver callbacks)
    // ----------------------------------------------------------------------
    interface GraphicChange {
	//gives the mattserver a list of graphics that it needs to refetch
	oneway void ChangeNotify(in boolean forceRedraw, in strings gIDseq);

	//tells the mattserver to forget about everything it had (so
	//when it redraws, to do a new fillrectangle call)
	oneway void ForgetAll(in boolean forceRedraw);

	//changes the ordering of graphics
	oneway void RaiseGraphic(in boolean forceRedraw, in strings gIDseq);
	oneway void LowerGraphic(in boolean forceRedraw, in strings gIDseq);

	//tells the mattserver about specific changes to the graphic
	//i.e. change fillcolor to blus
	oneway void SetClientAttributes(in boolean forceRedraw,
					in GUpdate info);

	//like _IT_PING(), but can be done asynchronously
	//which means it doesn't do anything generally useful
	void ping();
    };
    
    interface WidgetChange
      {
	//tells the mattserver to forget about the current palette (so
	//it will do a new getPaletteConfig() call)
       oneway void ForgetAll(in boolean forceRedo);
      };

    //------------------------------------------------------------
    //  Server methods
    //------------------------------------------------------------

    interface Server {
	// the specialist server maintains unique objects per
	// unique host:pid:layer context
	UGraphicSeq getRectangle (
	    in CProjection p, in LLPoint ll1, in LLPoint ll2,
	    in string staticArgs, inout string dynamicArgs,
	    // setup for gestures
	    out short graphicSeletableDistance,
	    out boolean areaEvents,
	    // callback interface
	    in GraphicChange notifyOnChange,
	    // mattserver ID
	    in string uniqueID);

	ActionSeq sendGesture(in MouseEvent gesture, in string uniqueID);

	// alerts specialist server that objects are no
	// longer needed for context host:pid:layer
	oneway void signoff(in string uniqueID);

	UWidgetSeq getPaletteConfig(in WidgetChange notifyOnChange,
				    in string staticArgs,
				    inout string dynamicArgs,
				    in string uniqueID);
    };
};

#endif
