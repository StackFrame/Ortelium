The java dcwSpecialist reads the raw DCW data, not "Koolish Files".
It can read directly from the CD-ROM, or from a copy of the CD on a
local filesystem.

The DcwSpecialist can be run like

java -mx64m com.bbn.openmap.dcwSpecialist.DcwSpecialist \
	-ior iorfile.ior -dcwpath /usr/local/matt/data/dcw

the -mx64 argument is optional, but highly recommended.  When viewing
large geographic areas, alot of memory is needed.  Even larger won't
hurt... 

-ior is a required argument, and is the path to use when writing out
the ior file for the webserver.

-dcwpath is optional, and defaults to /usr/local/matt/data/dcw.  Of
course, running anywhere but blatz, stout, etc., and you'll need to
set this argument.

   for dcw data, this directory should contain "browse", "dht.", and
   "lat." files at a minimum, plus whatever detailed coverage is being
   used.

   also, giving the -dcwpath argument causes the usage message to get
   printed twice.  this is harmless.

the dcwspecialist serves different coverage types on different
layers.  each entry in the overlays file needs to list the coverage
type as the dynamic arg.  So 2 sample lines for the overlay file are:

IIOP_Specialist "DcwPolitical" http://blatz/irad/ior/DcwSpecialist.ior "po"
IIOP_Specialist "DcwRoads" http://blatz/irad/ior/DcwSpecialist.ior "rd"

Some coverage types:

dn drainage
hy hypsography (contours)
ut utilities
rd roads
rr railroads

NOTES:


The following error message:
	
   Unable to start http server:
   java.net.BindException: Address already in use

is harmless, as this functionality isn't used in the current release.

TODO:

colors are assigned arbitrary values based on a single attribute value
and the type of graphic.  this needs to be configurable on a
per-coverage, per-graphic-type basis.

BUGS:

tiled data appears to get selected incorrectly when the map includes
the international dateline.  This results in the dcwspecialist falling 
back on browse level coverage rather than using the tiled data when
the scale indicates it should use tiled data.

FOR THE VPFSpecialist:

The client can specify what coverages and feature types that the
VPFSpecialist should return to it.  This is done in the properties for
the client side CSpecLayer, where the .staticArgs property has the
form:

vmap.staticArgs = (coverageType, trans) (featureTypes, edge) (edge, roadl)

Where this is the static args defined to get road data.

Apparently,

vmap.lineColor=AARRGGBB
vmap.fillColor=AARRGGBB

can be used to modify the colors used for the overlay, where the color
is defined as a Hex color code.
