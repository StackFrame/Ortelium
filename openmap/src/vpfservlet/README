A basic set of JSP/Servlet code to display VPF data in a web browser.
All of the data is presented as text, not on a map. It is intended to
help someone trying to understand how VPF tables are constructed, and
how they relate to one another.  It may also be helpful to someone
looking at what attributes are available for particular feature types
in a specific VPF database.

The packages uses J2EE capabilities, and has only been tested under
the Apache Software Foundation's Jakarta Tomcat J2EE engine (4.0). 

http://jakarta.apache.org

The package is still fairly basic, and needs some serious redesign.
Much of the package is laid out the way it is because the author went
out of his way to learn about specific J2EE capabilities.

Each installation will need to modify web.xml to reflect the database
name and path to the data for their server.

To build the code, the build.xml file needs to be modified so the
tomcat home directory is set.  You might have to set the servlet.jar
file name (servlet-api.jar for tomcat 5) depending on the version of
tomcat you are using.

Next, you need to modify the WEB-INF/web.xml file so it points to
your VPF data.  This is done by modifying/adding these sections:

    <context-param>
      <param-name>com.bbn.openmap.vpfservlet.vpf_library.noamer</param-name>
      <param-value>/data/vpf/vmaplv0/disk0</param-value>
      <description>
        VMAP Level 0 North America Data.
      </description>
    </context-param>

where the param-value parameter should point to the same directory
that the VPFLayer does, the parent of the .lat file for the dataset.
From the instructions in the web.xml file:

    Any parameter with a name beginning with
    "com.bbn.openmap.vpfservlet.vpf_library." will be interpreted as a path to
    the root of a VPF database. The servlets will first try and resolve the
    path within the webapp directory, and if not found there, will try the
    path as an absolute path.  If either of these paths are found, the library
    will be added to the list of available databases on the servlet home page.
    If neither of the paths work, the library will not be listed, and an error
    logged in the servlet logs.

Finally, run ant on your build.xml file, and a vbfbrowse.war file will
be created.  This war file needs to be moved into the tomcat webapps
directory.

The servlet can then be accessed by connecting to:

http://localhost:tomcat_port/vpfbrowse


Among the improvements needed:
  HTML generation code should move to JSPs wherever possible, java
code should just provide access to the JSP layer.
  The separation into schema and table data into separate servlets
needs to be reconsidered. For basic tables it works, but when joining
multiple tables, the schema section doesn't display this.  Probably
the schema output should be added to the RowMaker classes, since these
classes are what perform the joins.
  Need to be more aggressive about rejecting bad URLs, it might be
possible to get the servlet code to return data not in a database
path, and thus not intended to be shared.

